package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.smsutil.bean.SmsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMS_ENTITY".
*/
public class SmsEntityDao extends AbstractDao<SmsEntity, Long> {

    public static final String TABLENAME = "SMS_ENTITY";

    /**
     * Properties of entity SmsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property From = new Property(1, String.class, "from", false, "FROM");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Receive_time = new Property(3, long.class, "receive_time", false, "RECEIVE_TIME");
        public final static Property Upload_statu = new Property(4, int.class, "upload_statu", false, "UPLOAD_STATU");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
    };


    public SmsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SmsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM\" TEXT," + // 1: from
                "\"CONTENT\" TEXT," + // 2: content
                "\"RECEIVE_TIME\" INTEGER NOT NULL ," + // 3: receive_time
                "\"UPLOAD_STATU\" INTEGER NOT NULL ," + // 4: upload_statu
                "\"MESSAGE\" TEXT);"); // 5: message
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(2, from);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getReceive_time());
        stmt.bindLong(5, entity.getUpload_statu());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(2, from);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getReceive_time());
        stmt.bindLong(5, entity.getUpload_statu());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SmsEntity readEntity(Cursor cursor, int offset) {
        SmsEntity entity = new SmsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // from
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getLong(offset + 3), // receive_time
            cursor.getInt(offset + 4), // upload_statu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // message
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReceive_time(cursor.getLong(offset + 3));
        entity.setUpload_statu(cursor.getInt(offset + 4));
        entity.setMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
